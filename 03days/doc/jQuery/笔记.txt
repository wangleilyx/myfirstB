正则创建

	var re = /a/; // 这个a是一个字符
	var re = new RegExp('a'); // 这个a也是一个字符
	var re = new RegExp(a); // 这个a是一个变量
	
正则的默认规则：
	1、区分大小写（加标识符i，则可以不区分大小写）
	2、默认只匹配一次就完成，如果要多次匹配，则加标识符g
	
	
方法
正则提供的方法有两个：
    正则.test(字符串);
    正则.exec(字符中);

字符串提供的方法四个：
    字符串.match(正则);
    字符串.split(正则); 可以接收第二个参数，是拆分后的长度
    字符串.search(正则); 它不识别标识符g
    字符串.replace(正则, 新字符);	
	第二个参数不仅可以是一个字符串，也可以是一个函数。函数的第一个参数是匹配成功的字符，从第二个参数起，是匹配的正则的分组，即函数的第二个参数对应第一个小括号，第三个参数对应第二个小括号，以此类推
	

转义字符：
	本来这个字符它有自身的意思，但是加上反斜扛就成了另外一个意思。
	\s : 空格
	\S : 非空格
	\d : 数字 
	\D : 非数字
	\w : 字符   ( 字母 ，数字，下划线_ )
	\W : 非字符
	.  : 除了换行符以外的任意字符
	\. : 真正的点
	\b : 独立的部分   （ 起始，结束，空格 ）
	\B : 非独立的部分
	\1 : 重复的第一个子项
	\2 : 重复的第二个子项
	
	
量词：
	{4,7}  : 最少出现4次，最多出现7次
	{4,} : 最少出现4次，最多不限制
	{4} : 正好出现4次
	{1,} : 最少出现一次。简写为：+
	{0,}  : 至少出现0次。简写为：*
	{0,1}  : 出现0次或者1次。简写为：？
	
	
	
|：或者	
()：分组	
[]: 字符类	[a-z]它只代表一个小写字母
		[0-9]
		[a-zA-Z0-9]
		[^a-z] 排除a-z，其它的字符都匹配

^	尖角号起在起始位置
$	写在结束位置	
	

